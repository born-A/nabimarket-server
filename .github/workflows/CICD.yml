# workflow의 이름
name: CICD

# 해당 workflow가 언제 실행될 것인지에 대한 트리거를 지정
on:
  push:
    branches: [ "main", "dev" ] # master branch로 push 될 때 실행
  pull_request:
    branches: [ "main", "dev" ]  # master branch로 pull request될 때 실행

env:
  # 아무거나 해도 됨
  PROJECT_NAME: nabi
  # aws 이름 똑같아야됨
  BUCKET_NAME: team-01-bucket
  CODE_DEPLOY_APP_NAME: team01-codedeploy
  DEPLOYMENT_GROUP_NAME: team01-instance-group

permissions:
  contents: read

# workflow는 한개 이상의 job을 가지며, 각 job은 여러 step에 따라 단계를 나눌 수 있음
jobs:
  build:
    name: CI
    # 해당 jobs에서 아래의 steps들이 어떠한 환경에서 실행될 것인지를 지정
    runs-on: ubuntu-20.04

    steps:
      # 작업에서 액세스할 수 있도록 $GITHUB_WORKSPACE에서 저장소를 체크아웃
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # application.properties를 프로젝트에 포함
      - name: Make application.properties
        run: |
          cd ./src/main/resources
          touch ./application.properties

          echo "${{ secrets.DATABASE_PROPERTIES }}" >> ./application.properties
        shell: bash

      - name: Setup MySQL
        uses: samin/mysql-action@v1.3
        with:
          host port: 3306
          container port: 3306
          mysql database: 'nabi'
          mysql user: 'test'
          mysql password: ${{ secrets.MYSQL_PASSWORD }}

      # gradle 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Test with Gradle
        run: ./gradlew test
      
      # 빌드
      - name: Build with Gradle
        run: ./gradlew build
        shell: bash

#      - name: Make zip file
#        run: zip -r ./$GITHUB_SHA.zip .
#        shell: bash
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
#          aws-region: ap-northeast-2
#
#      # script files 복사
#      - name: Copy script
#        run: cp ./scripts/*.sh ./deploy
#
#      # S3에 빌드 결과 업로드
#      - name: Upload to S3
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip
#
#      # Deploy 실행
#      - name: Code Deploy To EC2 instance
#        run: aws deploy create-deployment
#          --application-name $CODE_DEPLOY_APP_NAME
#          --deployment-config-name CodeDeployDefault.AllAtOnce
#          --deployment-group-name $DEPLOYMENT_GROUP_NAME
#          --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
